{"version":3,"file":"static/js/847.9b90e7f6.chunk.js","mappings":"iOAkEA,UA9DqB,WAAO,IAADA,EAAAC,EACzBC,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACtBG,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEM,OAFNF,EAAAC,KAAA,EAEbb,GAAa,GAAMY,EAAAE,KAAA,GACIC,EAAAA,EAAAA,IAAoBd,GAAS,KAAD,EAA7CU,EAAQC,EAAAI,KACdpB,EAASe,GAAUC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,iBAGC,OAHDA,EAAAC,KAAA,GAGnBb,GAAa,GAAOY,EAAAM,OAAA,6BAAAN,EAAAO,OAAA,GAAAT,EAAA,wBAEvB,kBATa,OAAAH,EAAAa,MAAA,KAAAC,UAAA,KAWdf,GACF,GAAG,CAACL,IAEJ,IAAMqB,GAAeC,EAAAA,EAAAA,QAA2B,QAArBlC,EAAe,QAAfC,EAACa,EAASqB,aAAK,IAAAlC,OAAA,EAAdA,EAAgBmC,YAAI,IAAApC,EAAAA,EAAI,KAE5CqC,EAAgE/B,EAAhE+B,eAAgBC,EAAgDhC,EAAhDgC,YAAaC,EAAmCjC,EAAnCiC,aAAcC,EAAqBlC,EAArBkC,SAAUC,EAAWnC,EAAXmC,OAE7D,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAIb,EAAac,QAAQJ,SAAC,YAE/BjC,IAAakC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gFAEhBrC,EAAM0C,IACLN,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAN,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAKQ,MAAO,CAAEC,QAAS,QAASR,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OACEQ,IAAG,kCAAAC,OAAoCf,GACvCgB,IAAKjB,EACLkB,MAAO,OAETb,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKN,KACLK,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,eAAaa,KAAKC,MAAqB,GAAflB,GAAmB,QAC9CK,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAIH,KACJI,EAAAA,EAAAA,KAAA,KAAAD,SAAG,YACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAIF,EAAOiB,KAAI,SAAAC,GAAE,OAAIA,EAAGC,IAAI,IAAEC,KAAK,eAGvCjB,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BACHD,EAAAA,EAAAA,MAAA,OAAKQ,MAAO,CAAEC,QAAS,OAAQW,cAAe,UAAWnB,SAAA,EACvDC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,OAAOH,SAAC,UAClBC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,UAAUH,SAAC,gBAEvBC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACmB,EAAAA,GAAM,OAEP,OAGV,C","sources":["pages/MovieDetails.js"],"sourcesContent":["import { getMovieDetailsById } from 'helpers/api';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        setIsLoading(true);\n        const response = await getMovieDetailsById(movieId);\n        setMovie(response);\n      } catch (error) {\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie();\n  }, [movieId]);\n\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  const { original_title, poster_path, vote_average, overview, genres } = movie;\n\n  return (\n    <div>\n      <Link to={backLinkHref.current}>Go back</Link>\n\n      {isLoading && <p>Завантаження...</p>}\n\n      {movie.id ? (\n        <>\n          <div style={{ display: 'flex' }}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt={original_title}\n              width={300}\n            />\n            <div>\n              <h2>{original_title}</h2>\n              <p>User Score: {Math.round(vote_average * 10)}%</p>\n              <p>Overview</p>\n              <p>{overview}</p>\n              <p>Genres</p>\n              <p>{genres.map(el => el.name).join(', ')}</p>\n            </div>\n          </div>\n          <hr />\n          <p>Additional Information</p>\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <Link to={'cast'}>Cast</Link>\n            <Link to={'reviews'}>Reviews</Link>\n          </div>\n          <hr />\n          <Outlet />\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["_location$state$from","_location$state","_useState","useState","_useState2","_slicedToArray","movie","setMovie","_useState3","_useState4","isLoading","setIsLoading","movieId","useParams","location","useLocation","useEffect","getMovie","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","getMovieDetailsById","sent","t0","finish","stop","apply","arguments","backLinkHref","useRef","state","from","original_title","poster_path","vote_average","overview","genres","_jsxs","children","_jsx","Link","to","current","id","_Fragment","style","display","src","concat","alt","width","Math","round","map","el","name","join","flexDirection","Outlet"],"sourceRoot":""}