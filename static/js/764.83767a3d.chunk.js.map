{"version":3,"file":"static/js/764.83767a3d.chunk.js","mappings":"iOAgDA,UA3Ce,WAAO,IAADA,EACnBC,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAT,EAAAA,EAAAA,GAAAO,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,EAAiC,QAA5BhB,EAAGc,EAAaG,IAAI,gBAAQ,IAAAjB,EAAAA,EAAI,IAE3CkB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACF,KAAVX,EAAY,CAAAS,EAAAE,KAAA,eAAAF,EAAAG,OAAA,iBAKA,OALAH,EAAAC,KAAA,EAIdhB,GAAa,GACbJ,EAAU,IAAImB,EAAAE,KAAA,GACSE,EAAAA,EAAAA,IAAoBb,GAAO,KAAD,EAA3CQ,EAAQC,EAAAK,KACdxB,EAAUkB,EAASO,SAASN,EAAAE,KAAA,uBAAAF,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAEtBQ,MAAKR,EAAAO,IAAQ,KAAD,GAEE,OAFFP,EAAAC,KAAA,GAElBhB,GAAa,GAAOe,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,yBAEvB,kBAdc,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAgBflB,GACF,GAAG,CAACH,IAOJ,OACEsB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAACC,SAPY,SAAA3B,GAEzBD,EAD6B,KAAVC,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEjD,IAMKP,IAAagC,EAAAA,EAAAA,KAACG,EAAAA,GAAM,IAEpBvC,EAAOwC,OAAS,IAAKJ,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACC,KAAM1C,MAG9C,C","sources":["pages/Movies.js"],"sourcesContent":["import { searchMoviesByQuery } from 'utils/api';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader, MoviesList, Searchbar } from 'components';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    const getMovies = async () => {\n      if (query === '') {\n        return;\n      }\n      try {\n        setIsLoading(true);\n        setMovies([]);\n        const response = await searchMoviesByQuery(query);\n        setMovies(response.results);\n      } catch (error) {\n        throw Error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovies();\n  }, [query]);\n\n  const updateSearchParams = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={updateSearchParams} />\n\n      {isLoading && <Loader />}\n\n      {movies.length > 0 && <MoviesList data={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["_searchParams$get","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","isLoading","setIsLoading","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","useEffect","getMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","abrupt","searchMoviesByQuery","sent","results","t0","Error","finish","stop","apply","arguments","_jsxs","_Fragment","children","_jsx","Searchbar","onSubmit","Loader","length","MoviesList","data"],"sourceRoot":""}